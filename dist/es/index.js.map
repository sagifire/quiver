{"version":3,"file":"index.js","sources":["../../src/core/HttpException.ts","../../src/core/http.ts","../../src/core/Router.ts","../../src/services/StaticIndex.ts","../../src/route-types/PathRouteType.ts","../../src/route-types/StaticRouteType.ts"],"sourcesContent":["export class HttpException extends Error {\r\n    constructor(\r\n        public statusCode: number,\r\n        message = 'Http Error',\r\n        public expose = statusCode < 500,\r\n        public headers: Record<string, string> = {}\r\n    ) { \r\n        super(message) \r\n    }\r\n}\r\n","import type { IncomingMessage, ServerResponse } from 'node:http'\r\n\r\nimport { HttpException } from './HttpException.js'\r\n\r\nexport type Method =\r\n    | 'GET'|'HEAD'|'POST'|'PUT'|'PATCH'|'DELETE'|'OPTIONS'\r\n\r\nexport class RequestContext {\r\n\r\n    constructor(\r\n        public req: IncomingMessage,\r\n        public res: ServerResponse,\r\n    ) {}\r\n\r\n    url!: URL; // fill in router\r\n    params: Record<string,string> = Object.create(null)\r\n    locals: Record<string, unknown> = Object.create(null)\r\n\r\n    // Configurable limits\r\n    limits = { \r\n        bodySize: 16 * 1024, \r\n        headerTimeoutMs: 30_000, \r\n        requestTimeoutMs: 60_000 \r\n    }\r\n\r\n    // response API \r\n    status(code: number) { \r\n        this.res.statusCode = code\r\n        return this\r\n    }\r\n\r\n    header(k: string, v: string) { \r\n        this.res.setHeader(k, v)\r\n        return this\r\n    }\r\n\r\n    json(obj: unknown) {\r\n        if (!this.res.hasHeader('Content-Type')) {\r\n            this.res.setHeader('Content-Type', 'application/json; charset=utf-8')\r\n        } \r\n        this.res.end(JSON.stringify(obj))\r\n    }\r\n\r\n    text(s: string) {\r\n        if (!this.res.hasHeader('Content-Type')) {\r\n            this.res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n        }\r\n        this.res.end(s)\r\n    }\r\n\r\n    // Request body with limit and abort-safe\r\n    async bodyRaw(limit = this.limits.bodySize): Promise<Buffer> {\r\n        return new Promise((resolve, reject) => {\r\n            const chunks: Buffer[] = []\r\n            let size = 0, done = false\r\n            const fail = (err: Error) => { \r\n                if (!done) { \r\n                    done = true\r\n                    this.req.destroy()\r\n                    reject(err)\r\n                }\r\n            }\r\n            const ok = () => {\r\n                if (!done) {\r\n                    done = true\r\n                    resolve(Buffer.concat(chunks))\r\n                }\r\n            }\r\n\r\n            this.req.once('error', fail)\r\n            this.req.once('aborted', () => fail(new HttpException(499, 'Client Closed Request', true)))\r\n            this.req.on('data', (c: Buffer) => {\r\n                size += c.length\r\n                if (size > limit) return fail(new HttpException(413, 'Content Too Large', true))\r\n                chunks.push(c)\r\n            })\r\n            this.req.once('end', ok)\r\n        })\r\n    }\r\n\r\n    async bodyJson<T = unknown>(limit?: number): Promise<T> {\r\n        const raw = await this.bodyRaw(limit);\r\n        try { \r\n            return JSON.parse(raw.toString('utf8')) as T\r\n        }\r\n        catch { \r\n            throw new HttpException(400, 'Invalid JSON', true)\r\n        }\r\n    }\r\n}\r\n\r\nexport type Handler<Ctx extends RequestContext = RequestContext> =\r\n    (ctx: Ctx) => void | Promise<void>\r\n\r\nexport type Pipe<Ctx extends RequestContext = RequestContext> =\r\n    (ctx: Ctx) => void | Promise<void>\r\n\r\nexport interface RouteRuleBase<Ctx extends RequestContext = RequestContext> {\r\n    handler: Handler<Ctx>\r\n    pipes?: readonly Pipe<Ctx>[]\r\n}\r\n\r\nexport interface IRouteType<\r\n    Ctx extends RequestContext = RequestContext,\r\n    TRule extends RouteRuleBase<Ctx> = RouteRuleBase<Ctx>\r\n> {\r\n    readonly typeName: string\r\n    addRule(rule: TRule): void\r\n    match(ctx: Ctx): ((ctx: Ctx) => void | Promise<void>) | null\r\n}","import { IncomingMessage, ServerResponse } from 'node:http'\r\n\r\nimport { HttpException } from './HttpException.js'\r\nimport { RequestContext, Pipe, IRouteType, RouteRuleBase } from './http.js'\r\n\r\ntype TypeNameOf<T> = T extends { typeName: infer N extends string } ? N : never\r\ntype RuleOf<T>     = T extends IRouteType<any, infer R> ? R : never\r\n\r\ntype Registry<Ctx extends RequestContext> = Record<string, IRouteType<Ctx, any>>\r\ntype DiscriminatedRuleUnion<TReg extends Registry<any>> =\r\n    { [K in keyof TReg]:\r\n        RuleOf<TReg[K]> & { type: K & string }\r\n    }[keyof TReg]\r\n\r\n    \r\ntype CtxFactory<Ctx extends RequestContext> =\r\n    | { class: new (req: IncomingMessage, res: ServerResponse) => Ctx, factory?: never }\r\n    | { factory: (req: IncomingMessage, res: ServerResponse) => Ctx, class?: never }\r\n    | undefined\r\n\r\nexport class Router <\r\n    Ctx extends RequestContext = RequestContext,\r\n    TReg extends Registry<Ctx> = {}\r\n> {\r\n    private reg: TReg\r\n    private order: string[] = []\r\n    private ctxFactory?: CtxFactory<Ctx>\r\n    private globalPipes: Array<(ctx: Ctx)=>void|Promise<void>> = []\r\n\r\n    constructor(opts?: { context?: CtxFactory<Ctx> }) {\r\n        this.reg = {} as TReg\r\n        this.ctxFactory = opts?.context\r\n    }\r\n\r\n\r\n    useType<K extends string, T extends IRouteType<Ctx, any> & { typeName: K }>(\r\n        type: T\r\n    ): Router<Ctx, TReg & Record<K, T>> {\r\n        (this.reg as any)[type.typeName] = type\r\n        this.order.push(type.typeName)\r\n        return this as any\r\n    }\r\n\r\n    useGlobalPipes(...pipes: Pipe<Ctx>[]) {\r\n        this.globalPipes.push(...pipes)\r\n        return this\r\n    }\r\n\r\n    addRule(rule: DiscriminatedRuleUnion<TReg>) {\r\n        const t = (this.reg as any)[rule.type] as IRouteType<Ctx, RouteRuleBase<Ctx>> | undefined\r\n        if (!t) throw new Error(`Route type \"${rule.type}\" is not registered`)\r\n        \r\n        const { type: _omit, ...pureRule } = rule as any\r\n        t.addRule(pureRule)\r\n        return this\r\n    }\r\n\r\n    addRules(rules: Array<DiscriminatedRuleUnion<TReg>>) {\r\n        for (const r of rules) this.addRule(r)\r\n        return this\r\n    }\r\n\r\n    private makeCtx(req: IncomingMessage, res: ServerResponse): Ctx {\r\n        if (this.ctxFactory?.factory) return this.ctxFactory.factory(req, res)\r\n        if (this.ctxFactory?.class)   return new this.ctxFactory.class(req, res)\r\n        return new RequestContext(req, res) as Ctx\r\n    }\r\n\r\n    // Main server request handler\r\n    async handler(req: IncomingMessage, res: ServerResponse) {\r\n        const ctx = this.makeCtx(req, res)\r\n        const base = 'http://' + (req.headers.host || 'localhost')\r\n        ctx.url = new URL(req.url || '/', base)\r\n\r\n        try {\r\n            for (const globalPipe of this.globalPipes) {\r\n                await globalPipe(ctx)\r\n            }\r\n\r\n            for (const name of this.order) {\r\n                const routeType = (this.reg as any)[name] as IRouteType<Ctx, any>\r\n                const exec = routeType.match(ctx)\r\n                if (exec) {\r\n                    return await exec(ctx)\r\n                }\r\n            }\r\n\r\n            res.statusCode = 404\r\n            res.setHeader('Content-Type', 'application/json; charset=utf-8')\r\n            res.end(JSON.stringify({ error: 'Not Found' }))\r\n        } catch (e: any) {\r\n            const code = e?.statusCode ?? 500\r\n            res.statusCode = code\r\n            if (e?.headers) for (const [k, v] of Object.entries(e.headers)) res.setHeader(k, String(v))\r\n            res.setHeader('Content-Type', 'application/json; charset=utf-8')\r\n            res.end(JSON.stringify({ error: e?.expose ? e.message : 'Internal Server Error' }))\r\n        }\r\n    }\r\n}\r\n","// static-index.ts\r\nimport { promises as fsp } from 'node:fs'\r\nimport path from 'node:path'\r\n\r\nexport interface StaticIndexOptions {\r\n    rootDir: string\r\n    urlBase: string\r\n    scanIntervalMs?: number\r\n    followSymlinks?: boolean\r\n}\r\n\r\nexport class StaticIndex {\r\n    private map = new Map<string,string>() // \"/static/a/b.js\" => \"/abs/a/b.js\"\r\n    private root!: string\r\n    private base!: string\r\n    private timer?: NodeJS.Timeout\r\n\r\n    constructor(private opts: StaticIndexOptions) {\r\n        this.root = path.resolve(opts.rootDir)\r\n        this.base = opts.urlBase.endsWith('/') ? opts.urlBase.slice(0,-1) : opts.urlBase\r\n    }\r\n\r\n    start() {\r\n        this.rebuild().catch(()=>{})\r\n        if (this.opts.scanIntervalMs) {\r\n            this.timer = setInterval(() => this.rebuild().catch(()=>{}), this.opts.scanIntervalMs).unref()\r\n        }\r\n    }\r\n\r\n    stop() { \r\n        if (this.timer) clearInterval(this.timer)\r\n    }\r\n\r\n    // O(#files). Для великих дерев — інкрементал або шардінг по підкаталогах\r\n    private async rebuild() {\r\n        const next = new Map<string,string>()\r\n        const walk = async (dirAbs: string, rel: string) => {\r\n            const entries = await fsp.readdir(dirAbs, { withFileTypes: true })\r\n            for (const e of entries) {\r\n                const name = e.name;\r\n                if (name.startsWith('.')) {\r\n                    continue // ховаємо dotfiles\r\n                }\r\n                const childAbs = path.join(dirAbs, name)\r\n                const childRel = rel ? rel + '/' + name : name\r\n                if (e.isDirectory()) {\r\n                    await walk(childAbs, childRel)\r\n                } else if (e.isFile()) {\r\n                    const urlPath = this.base + '/' + childRel.replace(/\\\\/g,'/')\r\n                    next.set(urlPath, childAbs)\r\n                }\r\n            }\r\n        }\r\n        await walk(this.root, '')\r\n        // Атомарна заміна, читачі користуються \"map\"\r\n        this.map = next\r\n    }\r\n\r\n    lookup(urlPath: string): string | undefined {\r\n        return this.map.get(urlPath)\r\n    }\r\n\r\n    resolveUrl(url: URL): string | undefined {\r\n        const pathname = url.pathname\r\n        if (!(pathname === this.base || pathname.startsWith(this.base + '/'))) {\r\n            return undefined\r\n        }\r\n        const abs = this.lookup(pathname)\r\n        // додатковий рантайм-захист від traversal (хоч ми індексуємо, все одно перевіримо):\r\n        if (abs && abs.startsWith(this.root)) {\r\n            return abs\r\n        }\r\n        return undefined\r\n    }\r\n}\r\n","\r\nimport { IRouteType, RouteRuleBase, Pipe, RequestContext, Handler } from '../core/http.js'\r\n\r\nexport interface PathRule<Ctx extends RequestContext = RequestContext>\r\n    extends RouteRuleBase<Ctx> \r\n{\r\n    path: string\r\n    methods?: ('GET'|'HEAD'|'POST'|'PUT'|'PATCH'|'DELETE'|'OPTIONS')[]\r\n}\r\n\r\nfunction compose<Ctx extends RequestContext = RequestContext>(pipes: readonly Pipe<Ctx>[] | undefined, handler: Handler<Ctx>): Handler<Ctx> {\r\n    if (!pipes || pipes.length === 0) return handler\r\n    // flat loop for — minimal overhead\r\n    return async (ctx: Ctx) => {\r\n        for (const pipe of pipes) { \r\n            await pipe(ctx)\r\n        }\r\n        return handler(ctx)\r\n    }\r\n}\r\n\r\nexport class PathRouteType<Ctx extends RequestContext = RequestContext>\r\n    implements IRouteType<Ctx, PathRule<Ctx>> \r\n{  \r\n    readonly typeName = 'PATH' as const\r\n    private keys: string[] = []  // \"GET /health\"   (upper method)\r\n    private execs: Handler<Ctx>[] = []\r\n\r\n    addRule(rule: PathRule<Ctx>): void {\r\n        const methods = rule.methods?.length ? rule.methods : ['GET','HEAD','POST','PUT','PATCH','DELETE','OPTIONS']\r\n        const exe = compose(rule.pipes, rule.handler)\r\n        for (const m of methods) {\r\n            const key = `${m} ${rule.path}`            \r\n            let i = this.lowerBound(this.keys, key)\r\n            this.keys.splice(i, 0, key)\r\n            this.execs.splice(i, 0, exe)\r\n        }\r\n    }\r\n\r\n    match(ctx: RequestContext): Handler<Ctx> | null {\r\n        const method = (ctx.req.method || 'GET').toUpperCase()\r\n        const key = `${method} ${ctx.url.pathname.replace(/\\/$/, '') || '/'}`;\r\n        const i = this.lowerBound(this.keys, key);\r\n        return (i < this.keys.length && this.keys[i] === key) \r\n            ? this.execs[i]!\r\n            : null\r\n    }\r\n\r\n    private lowerBound(arr: string[], key: string): number {\r\n        let l = 0, r = arr.length;\r\n        while(l < r) { \r\n            const mid = (l + r >>> 1)\r\n            if (arr[mid]! < key) {\r\n                l = mid + 1\r\n            } else {\r\n                r = mid\r\n            }\r\n        }\r\n        return l\r\n    }\r\n}\r\n","import { createReadStream, promises as fsp } from 'node:fs'\r\nimport { extname } from 'node:path'\r\n\r\nimport { RequestContext, IRouteType, RouteRuleBase, Handler } from '../core/http.js'\r\n\r\nimport { StaticIndex } from '../services/StaticIndex.js'\r\n\r\nconst CT: Record<string,string> = {\r\n    '.html':'text/html; charset=utf-8', '.json':'application/json; charset=utf-8', '.txt':'text/plain; charset=utf-8',\r\n    '.js':'application/javascript; charset=utf-8', '.css':'text/css; charset=utf-8',\r\n    '.png':'image/png', '.jpg':'image/jpeg', '.jpeg':'image/jpeg', '.webp':'image/webp', '.gif':'image/gif', '.svg':'image/svg+xml',\r\n    '.mp4':'video/mp4', '.webm':'video/webm', '.mp3':'audio/mpeg', '.wav':'audio/wav',\r\n};\r\n\r\nexport interface StaticRule<Ctx extends RequestContext = RequestContext>\r\n    extends RouteRuleBase<Ctx> \r\n{\r\n    methods?: ('GET'|'HEAD')[]\r\n}\r\n\r\n\r\nexport class StaticRouteType<Ctx extends RequestContext = RequestContext>\r\n    implements IRouteType<Ctx, StaticRule<Ctx>> \r\n{\r\n    readonly typeName = 'STATIC' as const\r\n    constructor(private cfg: { index: StaticIndex }) {}\r\n\r\n    addRule(_rule: StaticRule<Ctx>): void {\r\n        // для STATIC зазвичай 1 правило на індекс; pipes можна навісити глобально на Router або тут\r\n    }\r\n\r\n    match(ctx: RequestContext): Handler<Ctx> | null {\r\n        if (ctx.req.method !== 'GET' && ctx.req.method !== 'HEAD') {\r\n            return null\r\n        }\r\n        const abs = this.cfg.index.resolveUrl(ctx.url)\r\n        if (!abs) return null\r\n\r\n        return async (c: RequestContext): Promise<void>  => {\r\n            const stats = await fsp.stat(abs)\r\n            const size = stats.size\r\n            const isHead = c.req.method === 'HEAD'\r\n\r\n            const ext = extname(abs).toLowerCase()\r\n            c.header('X-Content-Type-Options', 'nosniff')\r\n            c.header('Accept-Ranges', 'bytes')\r\n            c.header('Last-Modified', stats.mtime.toUTCString())\r\n            c.header('Content-Type', CT[ext] || 'application/octet-stream')\r\n\r\n            // ETag слабкий: W/\"size-mtimeMs\"\r\n            const etag = `W/\"${size}-${Math.trunc(stats.mtimeMs)}\"`\r\n            c.header('ETag', etag)\r\n            if (c.req.headers['if-none-match'] === etag) { \r\n                c.status(304)\r\n                c.res.end()\r\n                return\r\n            }\r\n\r\n            const range = c.req.headers['range']\r\n            if (range && range.startsWith('bytes=')) {\r\n                let [s, e] = range.slice(6).split('-')\r\n                let start = s ? parseInt(s, 10) : 0\r\n                let end = e ? parseInt(e, 10) : size - 1\r\n                if (Number.isNaN(start)) start = 0\r\n                if (Number.isNaN(end)) end = size - 1\r\n                if (start > end || start >= size) {\r\n                    c.status(416).header('Content-Range', `bytes */${size}`)\r\n                    c.res.end()\r\n                    return\r\n                }\r\n                c.status(206).header('Content-Range', `bytes ${start}-${end}/${size}`)\r\n                c.header('Content-Length', String(end - start + 1))\r\n                if (isHead) {\r\n                    c.res.end()\r\n                    return\r\n                }\r\n                const rs = createReadStream(abs, { start, end })\r\n                rs.on('error', () => c.res.destroy())\r\n                rs.pipe(c.res)\r\n                return\r\n            }\r\n\r\n            c.status(200).header('Content-Length', String(size))\r\n            if (isHead) {\r\n                c.res.end()\r\n                return \r\n            }\r\n            const rs = createReadStream(abs)\r\n            rs.on('error', () => c.res.destroy())\r\n            rs.pipe(c.res)\r\n        }\r\n    }\r\n}\r\n"],"names":["HttpException","statusCode","message","expose","headers","RequestContext","req","res","code","k","v","obj","s","limit","resolve","reject","chunks","size","done","fail","err","ok","c","raw","Router","opts","type","pipes","rule","t","_omit","pureRule","rules","r","ctx","base","globalPipe","name","exec","e","StaticIndex","path","next","walk","dirAbs","rel","entries","fsp","childAbs","childRel","urlPath","url","pathname","abs","compose","handler","pipe","PathRouteType","methods","exe","m","key","i","arr","l","mid","CT","StaticRouteType","cfg","_rule","stats","isHead","ext","extname","etag","range","start","end","rs","createReadStream"],"mappings":"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"}