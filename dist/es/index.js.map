{"version":3,"file":"index.js","sources":["../../src/core/HttpException.ts","../../src/core/http.ts","../../src/core/Router.ts","../../src/services/StaticIndex.ts","../../src/route-types/PathRouteType.ts","../../src/core/compose.ts","../../src/route-types/PatternRouteType.ts","../../src/route-types/StaticRouteType.ts"],"sourcesContent":["export class HttpException extends Error {\r\n    constructor(\r\n        public statusCode: number,\r\n        message = 'Http Error',\r\n        public expose = statusCode < 500,\r\n        public headers: Record<string, string> = {}\r\n    ) { \r\n        super(message) \r\n    }\r\n}\r\n","import type { IncomingMessage, ServerResponse } from 'node:http'\r\n\r\nimport { HttpException } from './HttpException.js'\r\n\r\nexport type Method =\r\n    | 'GET'|'HEAD'|'POST'|'PUT'|'PATCH'|'DELETE'|'OPTIONS'\r\n\r\nexport class RequestContext {\r\n\r\n    constructor(\r\n        public req: IncomingMessage,\r\n        public res: ServerResponse,\r\n    ) {}\r\n\r\n    url!: URL; // fill in router\r\n    params: Record<string,string> = Object.create(null)\r\n    locals: Record<string, unknown> = Object.create(null)\r\n\r\n    // Configurable limits\r\n    limits = { \r\n        bodySize: 16 * 1024, \r\n        headerTimeoutMs: 30_000, \r\n        requestTimeoutMs: 60_000 \r\n    }\r\n\r\n    // response API \r\n    status(code: number) { \r\n        this.res.statusCode = code\r\n        return this\r\n    }\r\n\r\n    header(k: string, v: string) { \r\n        this.res.setHeader(k, v)\r\n        return this\r\n    }\r\n\r\n    json(obj: unknown) {\r\n        if (!this.res.hasHeader('Content-Type')) {\r\n            this.res.setHeader('Content-Type', 'application/json; charset=utf-8')\r\n        } \r\n        this.res.end(JSON.stringify(obj))\r\n    }\r\n\r\n    text(s: string) {\r\n        if (!this.res.hasHeader('Content-Type')) {\r\n            this.res.setHeader('Content-Type', 'text/plain; charset=utf-8')\r\n        }\r\n        this.res.end(s)\r\n    }\r\n\r\n    // Request body with limit and abort-safe\r\n    async bodyRaw(limit = this.limits.bodySize): Promise<Buffer> {\r\n        return new Promise((resolve, reject) => {\r\n            const chunks: Buffer[] = []\r\n            let size = 0, done = false\r\n            const fail = (err: Error) => { \r\n                if (!done) { \r\n                    done = true\r\n                    this.req.destroy()\r\n                    reject(err)\r\n                }\r\n            }\r\n            const ok = () => {\r\n                if (!done) {\r\n                    done = true\r\n                    resolve(Buffer.concat(chunks))\r\n                }\r\n            }\r\n\r\n            this.req.once('error', fail)\r\n            this.req.once('aborted', () => fail(new HttpException(499, 'Client Closed Request', true)))\r\n            this.req.on('data', (c: Buffer) => {\r\n                size += c.length\r\n                if (size > limit) return fail(new HttpException(413, 'Content Too Large', true))\r\n                chunks.push(c)\r\n            })\r\n            this.req.once('end', ok)\r\n        })\r\n    }\r\n\r\n    async bodyJson<T = unknown>(limit?: number): Promise<T> {\r\n        const raw = await this.bodyRaw(limit);\r\n        try { \r\n            return JSON.parse(raw.toString('utf8')) as T\r\n        }\r\n        catch { \r\n            throw new HttpException(400, 'Invalid JSON', true)\r\n        }\r\n    }\r\n}\r\n\r\nexport type Handler<Ctx extends RequestContext = RequestContext> =\r\n    (ctx: Ctx) => void | Promise<void>\r\n\r\nexport type Pipe<Ctx extends RequestContext = RequestContext> =\r\n    (ctx: Ctx) => void | Promise<void>\r\n\r\nexport interface RouteRuleBase<Ctx extends RequestContext = RequestContext> {\r\n    handler: Handler<Ctx>\r\n    pipes?: readonly Pipe<Ctx>[]\r\n}\r\n\r\nexport interface IRouteType<\r\n    Ctx extends RequestContext = RequestContext,\r\n    TRule extends RouteRuleBase<Ctx> = RouteRuleBase<Ctx>\r\n> {\r\n    readonly typeName: string\r\n    addRule(rule: TRule): void\r\n    match(ctx: Ctx): ((ctx: Ctx) => void | Promise<void>) | null\r\n}","import { IncomingMessage, ServerResponse } from 'node:http'\r\n\r\nimport { HttpException } from './HttpException.js'\r\nimport { RequestContext, Pipe, IRouteType, RouteRuleBase } from './http.js'\r\n\r\ntype TypeNameOf<T> = T extends { typeName: infer N extends string } ? N : never\r\ntype RuleOf<T>     = T extends IRouteType<any, infer R> ? R : never\r\n\r\ntype Registry<Ctx extends RequestContext> = Record<string, IRouteType<Ctx, any>>\r\ntype DiscriminatedRuleUnion<TReg extends Registry<any>> =\r\n    { [K in keyof TReg]:\r\n        RuleOf<TReg[K]> & { type: K & string }\r\n    }[keyof TReg]\r\n\r\n    \r\ntype CtxFactory<Ctx extends RequestContext> =\r\n    | { class: new (req: IncomingMessage, res: ServerResponse) => Ctx, factory?: never }\r\n    | { factory: (req: IncomingMessage, res: ServerResponse) => Ctx, class?: never }\r\n    | undefined\r\n\r\nexport class Router <\r\n    Ctx extends RequestContext = RequestContext,\r\n    TReg extends Registry<Ctx> = {}\r\n> {\r\n    private reg: TReg\r\n    private order: string[] = []\r\n    private ctxFactory?: CtxFactory<Ctx>\r\n    private globalPipes: Array<(ctx: Ctx)=>void|Promise<void>> = []\r\n\r\n    constructor(opts?: { context?: CtxFactory<Ctx> }) {\r\n        this.reg = {} as TReg\r\n        this.ctxFactory = opts?.context\r\n    }\r\n\r\n\r\n    useType<K extends string, T extends IRouteType<Ctx, any> & { typeName: K }>(\r\n        type: T\r\n    ): Router<Ctx, TReg & Record<K, T>> {\r\n        (this.reg as any)[type.typeName] = type\r\n        this.order.push(type.typeName)\r\n        return this as any\r\n    }\r\n\r\n    useGlobalPipes(...pipes: Pipe<Ctx>[]) {\r\n        this.globalPipes.push(...pipes)\r\n        return this\r\n    }\r\n\r\n    addRule(rule: DiscriminatedRuleUnion<TReg>) {\r\n        const t = (this.reg as any)[rule.type] as IRouteType<Ctx, RouteRuleBase<Ctx>> | undefined\r\n        if (!t) throw new Error(`Route type \"${rule.type}\" is not registered`)\r\n        \r\n        const { type: _omit, ...pureRule } = rule as any\r\n        t.addRule(pureRule)\r\n        return this\r\n    }\r\n\r\n    addRules(rules: Array<DiscriminatedRuleUnion<TReg>>) {\r\n        for (const r of rules) this.addRule(r)\r\n        return this\r\n    }\r\n\r\n    private makeCtx(req: IncomingMessage, res: ServerResponse): Ctx {\r\n        if (this.ctxFactory?.factory) return this.ctxFactory.factory(req, res)\r\n        if (this.ctxFactory?.class)   return new this.ctxFactory.class(req, res)\r\n        return new RequestContext(req, res) as Ctx\r\n    }\r\n\r\n    // Main server request handler\r\n    async handler(req: IncomingMessage, res: ServerResponse) {\r\n        const ctx = this.makeCtx(req, res)\r\n        const base = 'http://' + (req.headers.host || 'localhost')\r\n        ctx.url = new URL(req.url || '/', base)\r\n\r\n        try {\r\n            for (const globalPipe of this.globalPipes) {\r\n                await globalPipe(ctx)\r\n            }\r\n\r\n            for (const name of this.order) {\r\n                const routeType = (this.reg as any)[name] as IRouteType<Ctx, any>\r\n                const exec = routeType.match(ctx)\r\n                if (exec) {\r\n                    return await exec(ctx)\r\n                }\r\n            }\r\n\r\n            res.statusCode = 404\r\n            res.setHeader('Content-Type', 'application/json; charset=utf-8')\r\n            res.end(JSON.stringify({ error: 'Not Found' }))\r\n        } catch (e: any) {\r\n            const code = e?.statusCode ?? 500\r\n            res.statusCode = code\r\n            if (e?.headers) for (const [k, v] of Object.entries(e.headers)) res.setHeader(k, String(v))\r\n            res.setHeader('Content-Type', 'application/json; charset=utf-8')\r\n            res.end(JSON.stringify({ error: e?.expose ? e.message : 'Internal Server Error' }))\r\n        }\r\n    }\r\n}\r\n","// static-index.ts\r\nimport { promises as fsp, Dirent, Stats } from 'node:fs'\r\nimport path from 'node:path'\r\n\r\nexport interface StaticIndexOptions {\r\n    rootDir: string\r\n    urlBase: string\r\n    scanIntervalMs?: number\r\n    followSymlinks?: boolean\r\n    maxFiles?: number\r\n    maxDepth?: number\r\n    allowWellKnown?: boolean\r\n    logger?: {\r\n        warn: (...params:any[]) => void\r\n        debug: (...params:any[]) => void\r\n    }\r\n}\r\n\r\nexport class StaticIndex {\r\n    private map = new Map<string,string>() // \"/static/a/b.js\" => \"/abs/a/b.js\"\r\n    private root!: string\r\n    private base!: string\r\n    private timer?: NodeJS.Timeout\r\n\r\n    constructor(private opts: StaticIndexOptions) {\r\n        this.root = path.resolve(opts.rootDir)\r\n        this.base = opts.urlBase.endsWith('/') ? opts.urlBase.slice(0,-1) : opts.urlBase\r\n    }\r\n\r\n    start() {\r\n        this.rebuild().catch(()=>{})\r\n        if (this.opts.scanIntervalMs) {\r\n            this.timer = setInterval(() => this.rebuild().catch(()=>{}), this.opts.scanIntervalMs).unref()\r\n        }\r\n    }\r\n\r\n    stop() { \r\n        if (this.timer) clearInterval(this.timer)\r\n    }\r\n\r\n    // O(#files). Для великих дерев — інкрементал або шардінг по підкаталогах\r\n    private async rebuild() {\r\n        const next = new Map<string, string>()\r\n        const visitedDirs = new Set<string>()\r\n\r\n        // 1) Real root\r\n        const rootReal = await fsp.realpath(this.root).catch(() => this.root)\r\n\r\n        const inRoot = (p: string) =>\r\n            p === rootReal || p.startsWith(rootReal + path.sep)\r\n\r\n        const walk = async (dirAbs: string, rel: string, depth = 0) => {\r\n            // (optional) depth limit\r\n            if (this.opts.maxDepth && depth > this.opts.maxDepth) {\r\n                return\r\n            }\r\n\r\n            let entries: Dirent[]\r\n            try {\r\n                entries = await fsp.readdir(dirAbs, { withFileTypes: true })\r\n            } catch (err) {\r\n                this.opts.logger?.warn?.(`readdir failed: ${dirAbs}`, err)\r\n                return\r\n            }\r\n\r\n            // loop protection \r\n            let dirReal = await fsp.realpath(dirAbs).catch(() => dirAbs)\r\n            if (!inRoot(dirReal)) return; // don't index files without root\r\n            if (visitedDirs.has(dirReal)) {\r\n                return\r\n            }\r\n            visitedDirs.add(dirReal)\r\n\r\n            for (const e of entries) {\r\n                const name = e.name\r\n                if (name.startsWith('.')) {\r\n                    if (!(this.opts.allowWellKnown && name === '.well-known')) {\r\n                        continue\r\n                    }\r\n                }\r\n\r\n                const childAbs = path.join(dirAbs, name)\r\n                const childRel = rel ? rel + '/' + name : name\r\n\r\n                let lst: Stats\r\n                try {\r\n                    lst = await fsp.lstat(childAbs) // without transition\r\n                } catch (error) {\r\n                    this.opts.logger?.debug?.(`lstat failed: ${childAbs}`, error)\r\n                    continue\r\n                }\r\n\r\n                // Symlink\r\n                if (lst.isSymbolicLink()) {\r\n                    if (!this.opts.followSymlinks) continue\r\n                    let targetReal: string\r\n                    try {\r\n                        targetReal = await fsp.realpath(childAbs)\r\n                    } catch (error) {\r\n                        this.opts.logger?.debug?.(`realpath failed: ${childAbs}`, error)\r\n                        continue;\r\n                    }\r\n                    if (!inRoot(targetReal)) {\r\n                        continue\r\n                    }\r\n\r\n                    // Classifying the target\r\n                    let st: Stats\r\n                    try {\r\n                        st = await fsp.stat(childAbs)\r\n                    } catch (error) {\r\n                        this.opts.logger?.debug?.(`stat failed: ${childAbs}`, error)\r\n                        continue\r\n                    }\r\n                    if (st.isDirectory()) {\r\n                        await walk(childAbs, childRel, depth + 1)\r\n                    } else if (st.isFile()) {\r\n                        const urlPath = `${this.base}/${childRel.split(path.sep).join('/')}`\r\n                        next.set(urlPath, childAbs); // save the path via link — ok\r\n                    }\r\n                    continue\r\n                }\r\n\r\n                // Normal files/directories\r\n                if (lst.isDirectory()) {\r\n                    await walk(childAbs, childRel, depth + 1)\r\n                } else if (lst.isFile()) {\r\n                    const urlPath = `${this.base}/${childRel.split(path.sep).join('/')}`\r\n                    next.set(urlPath, childAbs)\r\n                }\r\n                // other types — ignore\r\n            }\r\n        };\r\n\r\n        await walk(this.root, '')\r\n\r\n        // (optional) quantity limit\r\n        if (this.opts.maxFiles && next.size > this.opts.maxFiles) {\r\n            this.opts.logger?.warn?.(`file index truncated: ${next.size} > ${this.opts.maxFiles}`)\r\n        }\r\n\r\n        this.map = next // atomic replacement\r\n    }\r\n\r\n    lookup(urlPath: string): string | undefined {\r\n        return this.map.get(urlPath)\r\n    }\r\n\r\n    resolveUrl(url: URL): string | undefined {\r\n        const pathname = url.pathname\r\n        if (!(pathname === this.base || pathname.startsWith(this.base + '/'))) {\r\n            return undefined\r\n        }\r\n        const abs = this.lookup(pathname)\r\n        // додатковий рантайм-захист від traversal (хоч ми індексуємо, все одно перевіримо):\r\n        if (abs && abs.startsWith(this.root)) {\r\n            return abs\r\n        }\r\n        return undefined\r\n    }\r\n}\r\n","import { IRouteType, RouteRuleBase, Pipe, RequestContext, Handler } from '../core/http.js'\r\nimport { HttpException } from '../core/HttpException.js'\r\n\r\nexport interface PathRule<Ctx extends RequestContext = RequestContext>\r\n    extends RouteRuleBase<Ctx>\r\n{\r\n    path: string\r\n    methods?: ('GET'|'HEAD'|'POST'|'PUT'|'PATCH'|'DELETE'|'OPTIONS')[]\r\n}\r\n\r\nfunction compose<Ctx extends RequestContext = RequestContext>(pipes: readonly Pipe<Ctx>[]|undefined, handler: Handler<Ctx>): Handler<Ctx> {\r\n    if (!pipes || pipes.length === 0) {\r\n        return handler\r\n    }\r\n    return async (ctx: Ctx) => {\r\n        for (const pipe of pipes) {\r\n            await pipe(ctx)\r\n        }\r\n        return handler(ctx)\r\n    }\r\n}\r\n\r\nfunction normalizePath(p: string) {\r\n    if (!p || p === '/') {\r\n        return '/'\r\n    }\r\n    return p.endsWith('/') ? p.slice(0, -1) : p\r\n}\r\n\r\nconst METHOD_ORDER: ReadonlyArray<string> = ['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS']\r\n\r\nexport class PathRouteType<Ctx extends RequestContext = RequestContext>\r\n    implements IRouteType<Ctx, PathRule<Ctx>>\r\n{\r\n    readonly typeName = 'PATH' as const\r\n\r\n    // Бінарний пошук по \"METHOD␠PATH\"\r\n    private keys: string[] = []\r\n    private execs: Handler<Ctx>[] = []\r\n\r\n    // Для 405: індекс шлях → множина дозволених методів\r\n    private pathMethods = new Map<string, Set<string>>()\r\n\r\n    addRule(rule: PathRule<Ctx>) {\r\n        const path = normalizePath(rule.path)\r\n        const methods = (rule.methods?.length ? rule.methods : ['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'])\r\n            .map(m => m.toUpperCase())\r\n\r\n        const exe = compose(rule.pipes, rule.handler)\r\n\r\n        for (const m of methods) {\r\n            const key = `${m} ${path}`\r\n            const i = this.lowerBound(this.keys, key)\r\n            this.keys.splice(i, 0, key)\r\n            this.execs.splice(i, 0, exe)\r\n        }\r\n\r\n        let set = this.pathMethods.get(path)\r\n        if (!set) {\r\n            set = new Set<string>()\r\n            this.pathMethods.set(path, set)\r\n        }\r\n        for (const m of methods) {\r\n            set.add(m)\r\n        }\r\n    }\r\n\r\n    match(ctx: Ctx): Handler<Ctx>|null {\r\n        const method = (ctx.req.method || 'GET').toUpperCase()\r\n        const path = normalizePath(ctx.url.pathname)\r\n        const key = `${method} ${path}`\r\n\r\n        // 1) Точний збіг: METHOD + PATH\r\n        let i = this.lowerBound(this.keys, key)\r\n        if (i < this.keys.length && this.keys[i] === key) {\r\n            return this.execs[i]!\r\n        }\r\n\r\n        // 2) HEAD → fallback на GET, якщо HEAD не знайдено, але GET існує\r\n        if (method === 'HEAD') {\r\n            const getKey = `GET ${path}`\r\n            i = this.lowerBound(this.keys, getKey)\r\n            if (i < this.keys.length && this.keys[i] === getKey) {\r\n                const getHandler = this.execs[i]!;\r\n                return async (ctx: Ctx) => {\r\n                    // Зберігаємо оригінальний res.end\r\n                    const originalResEnd = ctx.res.end;\r\n                    // Тимчасово перевизначаємо res.end, щоб придушити тіло для HEAD запитів\r\n                    ctx.res.end = (chunk?: any) => {\r\n                        // Нічого не робимо з chunk, просто повертаємо res\r\n                        return ctx.res;\r\n                    };\r\n\r\n                    await getHandler(ctx); // Виконуємо GET обробник для побічних ефектів (наприклад, встановлення заголовків)\r\n\r\n                    // Відновлюємо оригінальний res.end\r\n                    ctx.res.end = originalResEnd;\r\n\r\n                    // Явно встановлюємо статус та завершуємо відповідь для HEAD\r\n                    // Зберігаємо статус, якщо він був встановлений обробником, інакше 200\r\n                    ctx.res.statusCode = ctx.res.statusCode === 200 ? 200 : ctx.res.statusCode;\r\n                    ctx.res.end(); // Відправляємо порожнє тіло\r\n                };\r\n            }\r\n        }\r\n\r\n        // 3) Розрізнення 404 vs 405\r\n        const allowed = this.pathMethods.get(path)\r\n        if (allowed && allowed.size > 0) {\r\n            // RFC: якщо GET дозволено, HEAD теж вважається дозволеним → додамо у Allow\r\n            const allowList = new Set<string>(allowed)\r\n            if (allowed.has('GET')) {\r\n                allowList.add('HEAD')\r\n            }\r\n            const ordered = METHOD_ORDER.filter(m => allowList.has(m))\r\n            const allowHeader = ordered.length ? ordered.join(', ') : Array.from(allowList).join(', ')\r\n            return () => {\r\n                throw new HttpException(405, 'Method Not Allowed', true, { 'Allow': allowHeader })\r\n            }\r\n        }\r\n\r\n        // Інакше — шляху немає зовсім → 404 (Router відпрацює свій notFound)\r\n        return null\r\n    }\r\n\r\n    private lowerBound(arr: string[], key: string): number {\r\n        let l = 0\r\n        let r = arr.length\r\n        while (l < r) {\r\n            const mid = (l + r >>> 1)\r\n            if (arr[mid]! < key) {\r\n                l = mid + 1\r\n            } else {\r\n                r = mid\r\n            }\r\n        }\r\n        return l\r\n    }\r\n}\r\n","import { RequestContext, Handler, Pipe } from './http.js'\r\n\r\nexport function compose<Ctx extends RequestContext>(\r\n    pipes: readonly Pipe<Ctx>[]|undefined,\r\n    handler: Handler<Ctx>\r\n): Handler<Ctx> {\r\n    if (!pipes || pipes.length === 0) {\r\n        return handler\r\n    }\r\n    return async (ctx: Ctx) => {\r\n        for (const pipe of pipes) {\r\n            await pipe(ctx)\r\n        }\r\n        return handler(ctx)\r\n    }\r\n}\r\n","// PatternRouteType.ts\r\nimport { IRouteType, Handler, RequestContext, RouteRuleBase, Pipe } from '../core/http.js'\r\nimport { compose } from '../core/compose.js'\r\n\r\nexport type Method = 'GET'|'HEAD'|'POST'|'PUT'|'PATCH'|'DELETE'|'OPTIONS'\r\n\r\nexport interface PatternRule<Ctx extends RequestContext = RequestContext>\r\n    extends RouteRuleBase<Ctx>\r\n{\r\n    pattern: string\r\n    methods?: Method[]\r\n    constraints?: Record<string, 'int'|'uuid'|'hex'|'alpha'|RegExp|((v: string) => boolean)>\r\n}\r\n\r\n/* ---------------- internals ---------------- */\r\n\r\ntype Validator = (v: string) => boolean\r\n\r\nconst BuiltinValidators: Record<string, Validator> = {\r\n    int:   v => /^-?\\d+$/.test(v),\r\n    uuid:  v => /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(v),\r\n    hex:   v => /^[0-9a-f]+$/i.test(v),\r\n    alpha: v => /^[A-Za-z]+$/.test(v),\r\n}\r\n\r\nfunction toValidator(\r\n    spec: 'int'|'uuid'|'hex'|'alpha'|RegExp|((v: string) => boolean)|undefined\r\n): Validator|undefined {\r\n    if (!spec) {\r\n        return undefined\r\n    }\r\n    if (typeof spec === 'function') {\r\n        return spec\r\n    }\r\n    if (spec instanceof RegExp) {\r\n        const r = spec\r\n        return v => r.test(v)\r\n    }\r\n    return BuiltinValidators[spec]\r\n}\r\n\r\ntype Token =\r\n    | { t: 'static', val: string }\r\n    | { t: 'param', name: string, validate?: Validator }\r\n    | { t: 'wildcard', name: string } // останній сегмент\r\n\r\nfunction normalizePath(p: string) {\r\n    if (!p || p === '/') {\r\n        return '/'\r\n    }\r\n    return p.endsWith('/') ? p.slice(0, -1) : p\r\n}\r\n\r\nfunction decodeSafe(s: string): string|null {\r\n    try {\r\n        return decodeURIComponent(s)\r\n    } catch {\r\n        return null\r\n    }\r\n}\r\n\r\nfunction parsePattern(pattern: string, constraints?: PatternRule['constraints']): Token[] {\r\n    const clean = normalizePath(pattern)\r\n    if (clean === '/') {\r\n        return []\r\n    }\r\n    const parts = clean.slice(1).split('/')\r\n\r\n    const tokens: Token[] = []\r\n    for (let i = 0; i < parts.length; i++) {\r\n        const seg = parts[i]!\r\n        if (seg.startsWith(':')) {\r\n            const m = /^:([A-Za-z_][A-Za-z0-9_]*)(?:\\((.+)\\))?$/.exec(seg)\r\n            if (!m) {\r\n                throw new Error(`Invalid param segment: ${seg}`)\r\n            }\r\n            const name = m[1]\r\n            if (!name) {\r\n                throw new Error(`Invalid param name in segment: ${seg}`)\r\n            }\r\n            let validate: Validator|undefined\r\n            if (m[2]) {\r\n                validate = toValidator(new RegExp(`^(?:${m[2]})$`))\r\n            } else if (constraints && constraints[name]) {\r\n                validate = toValidator(constraints[name])\r\n            }\r\n            tokens.push({ t: 'param', name, validate })\r\n            continue\r\n        }\r\n        if (seg === '*' || seg.startsWith('*')) {\r\n            const name = seg === '*' ? 'wild' : seg.slice(1)\r\n            if (i !== parts.length - 1) {\r\n                throw new Error('Wildcard must be the last segment')\r\n            }\r\n            tokens.push({ t: 'wildcard', name })\r\n            continue\r\n        }\r\n        tokens.push({ t: 'static', val: seg })\r\n    }\r\n    return tokens\r\n}\r\n\r\ntype Exec<Ctx extends RequestContext> = Handler<Ctx>\r\n\r\nclass Node<Ctx extends RequestContext> {\r\n    sChildren: Map<string, Node<Ctx>>|null = null\r\n    pChild: { name: string, validate?: Validator, node: Node<Ctx> }|null = null\r\n    wChild: { name: string, node: Node<Ctx> }|null = null\r\n    handlers: Map<Method, Exec<Ctx>>|null = null\r\n\r\n    getOrAddStatic(seg: string) {\r\n        if (!this.sChildren) {\r\n            this.sChildren = new Map()\r\n        }\r\n        let n = this.sChildren.get(seg)\r\n        if (!n) {\r\n            n = new Node<Ctx>()\r\n            this.sChildren.set(seg, n)\r\n        }\r\n        return n\r\n    }\r\n\r\n    setParam(name: string, validate?: Validator) {\r\n        // Обмеження на додавання param після wildcard видалено, оскільки пріоритет визначається під час матчингу.\r\n        if (!this.pChild) {\r\n            this.pChild = { name, validate, node: new Node<Ctx>() }\r\n        }\r\n        return this.pChild.node\r\n    }\r\n\r\n    setWildcard(name: string) {\r\n        if (!this.wChild) {\r\n            this.wChild = { name, node: new Node<Ctx>() }\r\n        }\r\n        return this.wChild.node\r\n    }\r\n\r\n    setHandler(methods: Method[], exec: Exec<Ctx>) {\r\n        if (!this.handlers) {\r\n            this.handlers = new Map()\r\n        }\r\n        for (const m of methods) {\r\n            if (this.handlers.has(m)) {\r\n                throw new Error(`Duplicate handler for method ${m}`)\r\n            }\r\n            this.handlers.set(m, exec)\r\n        }\r\n    }\r\n\r\n    getHandler(method: Method): Exec<Ctx>|null {\r\n        if (!this.handlers) {\r\n            return null\r\n        }\r\n        const h = this.handlers.get(method) || (method === 'HEAD' ? this.handlers.get('GET') : undefined)\r\n        return h ?? null\r\n    }\r\n}\r\n\r\n/* ---------------- exported route type ---------------- */\r\n\r\nexport class PatternRouteType<Ctx extends RequestContext = RequestContext>\r\n    implements IRouteType<Ctx, PatternRule<Ctx>>\r\n{\r\n    readonly typeName = 'PATH_PATTERN' as const\r\n    private root = new Node<Ctx>()\r\n\r\n    addRule(rule: PatternRule<Ctx>) {\r\n        const methods: Method[] = rule.methods?.length\r\n            ? rule.methods\r\n            : ['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS']\r\n\r\n        const tokens = parsePattern(rule.pattern, rule.constraints)\r\n        const exec = compose(rule.pipes as readonly Pipe<Ctx>[]|undefined, rule.handler as Handler<Ctx>)\r\n\r\n        let node = this.root\r\n        for (let i = 0; i < tokens.length; i++) {\r\n            const t = tokens[i]!\r\n            if (t.t === 'static') {\r\n                node = node.getOrAddStatic(t.val)\r\n            } else if (t.t === 'param') {\r\n                node = node.setParam(t.name, t.validate)\r\n            } else {\r\n                node = node.setWildcard(t.name)\r\n                if (i !== tokens.length - 1) {\r\n                    throw new Error('Wildcard must be the last segment')\r\n                }\r\n            }\r\n        }\r\n        node.setHandler(methods, exec)\r\n    }\r\n\r\n    match(ctx: Ctx): Handler<Ctx>|null {\r\n        const pathname = normalizePath(ctx.url.pathname)\r\n        const method = (ctx.req.method as Method) || 'GET'\r\n\r\n        if (pathname === '/') {\r\n            // Спочатку перевіряємо статичний обробник для кореневого шляху\r\n            let h = this.root.getHandler(method)\r\n            if (h) {\r\n                return h\r\n            }\r\n            // Якщо статичного обробника немає, перевіряємо wildcard для кореневого шляху (наприклад, /*path)\r\n            if (this.root.wChild) {\r\n                h = this.root.wChild.node.getHandler(method)\r\n                if (h) {\r\n                    // Для кореневого шляху параметр wildcard має бути порожнім рядком\r\n                    return (c: Ctx) => {\r\n                        (c as any).params = { [this.root.wChild!.name]: '' }\r\n                        return h!(c)\r\n                    }\r\n                }\r\n            }\r\n            return null\r\n        }\r\n\r\n        const parts = pathname.slice(1).split('/')\r\n\r\n        let params: Record<string, string>|null = null\r\n\r\n        const go = (node: Node<Ctx>, idx: number): Exec<Ctx>|null => {\r\n            if (idx === parts.length) {\r\n                return node.getHandler(method)\r\n            }\r\n\r\n            const segRaw = parts[idx]\r\n            if (segRaw === undefined) {\r\n                return null\r\n            }\r\n\r\n            const segDec = decodeSafe(segRaw)\r\n            if (segDec === null) {\r\n                return null\r\n            }\r\n\r\n            if (node.sChildren) {\r\n                const next = node.sChildren.get(segDec)\r\n                if (next) {\r\n                    const h = go(next, idx + 1)\r\n                    if (h) {\r\n                        return h\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (node.pChild) {\r\n                const { name, validate, node: pnode } = node.pChild\r\n                if (!validate || validate(segDec)) {\r\n                    if (!params) {\r\n                        params = Object.create(null)\r\n                    }\r\n                    params![name] = segDec\r\n                    const h = go(pnode, idx + 1)\r\n                    if (h) {\r\n                        return h\r\n                    }\r\n                    delete params![name]\r\n                }\r\n            }\r\n\r\n            if (node.wChild) {\r\n                let acc = ''\r\n                for (let i = idx; i < parts.length; i++) {\r\n                    const d = decodeSafe(parts[i]!)\r\n                    if (d === null) {\r\n                        return null\r\n                    }\r\n                    acc += (i === idx ? '' : '/') + d\r\n                }\r\n                if (!params) {\r\n                    params = Object.create(null)\r\n                }\r\n                params![node.wChild.name] = acc\r\n                const h = node.wChild.node.getHandler(method)\r\n                if (h) {\r\n                    return h\r\n                }\r\n                delete params![node.wChild.name]\r\n            }\r\n\r\n            return null\r\n        }\r\n\r\n        const found = go(this.root, 0)\r\n        if (!found) {\r\n            return null\r\n        }\r\n\r\n        return (c: Ctx) => {\r\n            if (params) {\r\n                ;(c as any).params = params\r\n            }\r\n            return found(c)\r\n        }\r\n    }\r\n}\r\n","import { createReadStream, promises as fsp, Stats } from 'node:fs'\r\nimport { extname } from 'node:path'\r\n\r\nimport { RequestContext, IRouteType, RouteRuleBase, Handler } from '../core/http.js'\r\n\r\nimport { StaticIndex } from '../services/StaticIndex.js'\r\n\r\nexport type ContentTypeMap = Record<string, string>\r\n\r\nexport interface StaticRouteOptions {\r\n    index: StaticIndex\r\n\r\n    /** Complete custom MIME resolver function. Takes precedence over the map. */\r\n    resolveContentType?: (\r\n        ext: string,\r\n        absPath: string,\r\n        stats: Stats,\r\n        ctx: RequestContext\r\n    ) => string | undefined\r\n\r\n    /** Additional or alternative types. Keys are extensions with a dot, e.g. \".md\". */\r\n    contentTypes?: ContentTypeMap\r\n\r\n    /** MIME is the default if nothing else works. */\r\n    defaultContentType?: string\r\n\r\n    /** Auto-add charset for text/* and application/json. Default is 'utf-8'. */\r\n    defaultTextCharset?: string | false\r\n}\r\n\r\n// Base map. Keys are in lower-case, with a period.\r\nconst BASE_CT: ContentTypeMap = {\r\n    '.html':'text/html; charset=utf-8', '.json':'application/json; charset=utf-8', '.txt':'text/plain; charset=utf-8',\r\n    '.js':'application/javascript; charset=utf-8', '.css':'text/css; charset=utf-8',\r\n    '.png':'image/png', '.jpg':'image/jpeg', '.jpeg':'image/jpeg', '.webp':'image/webp', '.gif':'image/gif', '.svg':'image/svg+xml',\r\n    '.mp4':'video/mp4', '.webm':'video/webm', '.mp3':'audio/mpeg', '.wav':'audio/wav',\r\n}\r\n\r\nfunction normalizeCTMap(src?: ContentTypeMap): ContentTypeMap {\r\n    if (!src) {\r\n        return {}\r\n    }\r\n    const out: ContentTypeMap = {}\r\n    for (const [k, v] of Object.entries(src)) {\r\n        const key = k.startsWith('.') ? k.toLowerCase() : ('.' + k.toLowerCase())\r\n        out[key] = v\r\n    }\r\n    return out\r\n}\r\n\r\nfunction maybeAppendCharset(mime: string, charset: string | false | undefined): string {\r\n    if (!charset) return mime\r\n    // Add charset if it's text/* or application/json and not already added\r\n    if ((/^text\\//.test(mime) || /^application\\/json\\b/.test(mime)) && !/;\\s*charset=/i.test(mime)) {\r\n        return `${mime}; charset=${charset}`\r\n    }\r\n    return mime\r\n}\r\n\r\nexport interface StaticRule<Ctx extends RequestContext = RequestContext>\r\n    extends RouteRuleBase<Ctx> \r\n{\r\n    methods?: ('GET'|'HEAD')[]\r\n}\r\n\r\n\r\nexport class StaticRouteType<Ctx extends RequestContext = RequestContext>\r\n    implements IRouteType<Ctx, StaticRule<Ctx>> \r\n{\r\n    readonly typeName = 'STATIC' as const\r\n\r\n    private readonly ct: ContentTypeMap\r\n    private readonly resolveCT?: StaticRouteOptions['resolveContentType']\r\n    private readonly defaultCT: string\r\n    private readonly defaultTextCharset: string | false\r\n\r\n    constructor(private cfg: StaticRouteOptions) {\r\n        this.resolveCT = cfg.resolveContentType\r\n        // Користувацькі типи перекривають базові (merge)\r\n        this.ct = { ...BASE_CT, ...normalizeCTMap(cfg.contentTypes) }\r\n        this.defaultCT = cfg.defaultContentType ?? 'application/octet-stream'\r\n        this.defaultTextCharset = cfg.defaultTextCharset ?? 'utf-8'\r\n    }\r\n\r\n    addRule(_rule: StaticRule<Ctx>): void {\r\n        // для STATIC зазвичай 1 правило на індекс; pipes можна навісити глобально на Router або тут\r\n    }\r\n\r\n    match(ctx: Ctx): Handler<Ctx> | null {\r\n        if (ctx.req.method !== 'GET' && ctx.req.method !== 'HEAD') {\r\n            return null\r\n        }\r\n        const abs = this.cfg.index.resolveUrl(ctx.url)\r\n        if (!abs) return null\r\n\r\n        return async (c: Ctx): Promise<void>  => {\r\n            const stats = await fsp.stat(abs)\r\n            const size = stats.size\r\n            const isHead = c.req.method === 'HEAD'\r\n\r\n            const ext = extname(abs).toLowerCase()\r\n            const resolvedMime =\r\n                this.resolveCT?.(ext, abs, stats, c)\r\n                ?? this.ct[ext]\r\n                ?? this.defaultCT\r\n\r\n            c.header('X-Content-Type-Options', 'nosniff')\r\n            c.header('Accept-Ranges', 'bytes')\r\n            c.header('Last-Modified', stats.mtime.toUTCString())\r\n            c.header('Content-Type', maybeAppendCharset(resolvedMime, this.defaultTextCharset))\r\n\r\n            // ETag слабкий: W/\"size-mtimeMs\"\r\n            const etag = `W/\"${size}-${Math.trunc(stats.mtimeMs)}\"`\r\n            c.header('ETag', etag)\r\n            if (c.req.headers['if-none-match'] === etag) { \r\n                c.status(304)\r\n                c.res.end()\r\n                return\r\n            }\r\n\r\n            const range = c.req.headers['range']\r\n            if (range && range.startsWith('bytes=')) {\r\n                let [s, e] = range.slice(6).split('-')\r\n                let start = s ? parseInt(s, 10) : 0\r\n                let end = e ? parseInt(e, 10) : size - 1\r\n                if (Number.isNaN(start)) start = 0\r\n                if (Number.isNaN(end)) end = size - 1\r\n                if (start > end || start >= size) {\r\n                    c.status(416).header('Content-Range', `bytes */${size}`)\r\n                    c.res.end()\r\n                    return\r\n                }\r\n                c.status(206).header('Content-Range', `bytes ${start}-${end}/${size}`)\r\n                c.header('Content-Length', String(end - start + 1))\r\n                if (isHead) {\r\n                    c.res.end()\r\n                    return\r\n                }\r\n                const rs = createReadStream(abs, { start, end })\r\n                rs.on('error', () => c.res.destroy())\r\n                rs.pipe(c.res)\r\n                return\r\n            }\r\n\r\n            c.status(200).header('Content-Length', String(size))\r\n            if (isHead) {\r\n                c.res.end()\r\n                return \r\n            }\r\n            const rs = createReadStream(abs)\r\n            rs.on('error', () => c.res.destroy())\r\n            rs.pipe(c.res)\r\n        }\r\n    }\r\n}\r\n"],"names":["HttpException","statusCode","message","expose","headers","RequestContext","req","res","code","k","v","obj","s","limit","resolve","reject","chunks","size","done","fail","err","ok","c","raw","Router","opts","type","pipes","rule","t","_omit","pureRule","rules","r","ctx","base","globalPipe","name","exec","e","StaticIndex","path","next","visitedDirs","rootReal","fsp","inRoot","p","walk","dirAbs","rel","depth","entries","dirReal","childAbs","childRel","lst","error","targetReal","st","urlPath","url","pathname","abs","compose","handler","pipe","normalizePath","METHOD_ORDER","PathRouteType","methods","m","exe","key","i","set","method","getKey","getHandler","originalResEnd","chunk","allowed","allowList","ordered","allowHeader","arr","l","mid","BuiltinValidators","toValidator","spec","decodeSafe","parsePattern","pattern","constraints","clean","parts","tokens","seg","validate","Node","n","PatternRouteType","node","h","params","go","idx","segRaw","segDec","pnode","acc","d","found","BASE_CT","normalizeCTMap","src","out","maybeAppendCharset","mime","charset","StaticRouteType","cfg","_rule","stats","isHead","ext","extname","resolvedMime","etag","range","start","end","rs","createReadStream"],"mappings":"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"}